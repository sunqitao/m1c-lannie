group 'cn.m1c.lannie'
version '1.0.5-RELEASE'

apply plugin: 'java'
apply plugin :'maven'//添加Maven插件
apply plugin :'idea'//添加Maven插件
apply plugin: 'signing' //使用signing plugin做数字签名 


//指定编码环境
sourceCompatibility = 1.8
//指定编译环境
targetCompatibility = 1.8
//设置编码
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}
//创建java文档
task createJavadoc(type: Javadoc){
    source = sourceSets.main.allJava
}


repositories {
    maven { url 'http://repo2.maven.org/maven2/' }
    mavenLocal()//添加maven本地仓库
    mavenCentral()//添加maven中央仓库
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: junit_version
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: mongo_java_driver_version
    compile('org.springframework.data:spring-data-mongodb:'+spring_data_mongodb_version){
        exclude group: 'org.springframework' //by both name and group  会携带spring 4.2.3 的相关jar包
//        exclude module: 'spring-data-commons'//已经是最新版
    }
    // https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload
	compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.2'
    
    compile group: 'log4j', name: 'log4j', version: log4j_version //带着self4j
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: slf4j_version //带着self4j
    compile group: 'com.alibaba', name: 'fastjson', version: fastjson_version
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: httpclient_version
    compile ('org.springframework.data:spring-data-redis:'+spring_data_redis_version){
        exclude group: 'org.springframework' //by both name and group  会携带spring 4.2.6 的相关jar包
    }
    compile('javax:javaee-api:7.0')
    compile group: 'redis.clients', name: 'jedis', version: jedis_version
    compile group: 'com.alibaba', name: 'druid', version: druid_version
    compile group: 'mysql', name: 'mysql-connector-java', version: mysql_connector_java_version
    compile group: 'org.aspectj', name: 'aspectjrt', version: aspectjrt_version

    compile group: 'org.mybatis', name: 'mybatis', version: mybatis_version
    compile group: 'org.mybatis', name: 'mybatis-spring', version: mybatis_spring_version


    compile group: 'org.springframework', name: 'spring-core', version: spring_version
    compile group: 'org.springframework', name: 'spring-web', version: spring_version
    compile group: 'org.springframework', name: 'spring-oxm', version: spring_version
    compile group: 'org.springframework', name: 'spring-tx', version: spring_version
    compile group: 'org.springframework', name: 'spring-jdbc', version: spring_version
    compile group: 'org.springframework', name: 'spring-webmvc', version: spring_version
    compile group: 'org.springframework', name: 'spring-aop', version: spring_version
    compile group: 'org.springframework', name: 'spring-context-support', version: spring_version
    compile group: 'org.springframework', name: 'spring-test', version: spring_version
    compile group: 'org.springframework', name: 'spring-aspects', version: spring_version
    
    // reques param is json  response is json must use down jar
	compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.13'
	compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.4'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.1'
	
	
    
    
}



//上传jar到中央仓库用的
//apply from: 'https://raw.githubusercontent.com/gam2046/gradle-mvn-push/master/gradle-mvn-push.gradle'

apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
    
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
    
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    artifacts {
        archives javadocJar, sourcesJar
    }
}
